
ToggleLEDWithButton-NoHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010430  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000bab  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000307  00000000  00000000  0001100b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000b0  00000000  00000000  00011318  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000113c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000579  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000434  00000000  00000000  000119b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00011ded  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000018c  00000000  00000000  00011e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000410 	.word	0x08000410

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000410 	.word	0x08000410

080001c8 <led_clock_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_clock_init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    RCC_TypeDef *rcc = RCC;
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <led_clock_init+0x24>)
 80001d0:	607b      	str	r3, [r7, #4]
    rcc->AHB1ENR |= (1 << 3);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	f043 0208 	orr.w	r2, r3, #8
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40023800 	.word	0x40023800

080001f0 <led_init>:

void led_init(LED_ENUM led) {
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <led_init+0x30>)
 80001fc:	60fb      	str	r3, [r7, #12]
    gpio->MODER |= (01 << (led * 2));
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	0052      	lsls	r2, r2, #1
 8000206:	2101      	movs	r1, #1
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40020c00 	.word	0x40020c00

08000224 <led_turn_on>:

void led_turn_on(LED_ENUM led) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <led_turn_on+0x2c>)
 8000230:	60fb      	str	r3, [r7, #12]
    gpio->ODR |= (1 << led);
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	79fa      	ldrb	r2, [r7, #7]
 8000238:	2101      	movs	r1, #1
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	431a      	orrs	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	615a      	str	r2, [r3, #20]
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40020c00 	.word	0x40020c00

08000254 <led_turn_off>:

void led_turn_off(LED_ENUM led) {
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <led_turn_off+0x30>)
 8000260:	60fb      	str	r3, [r7, #12]
    gpio->ODR &= ~(1 << led);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	79fa      	ldrb	r2, [r7, #7]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	401a      	ands	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	615a      	str	r2, [r3, #20]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <main>:
#include "stm32f4xx.h"
#include "led.h"

int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
    led_clock_init(); // Enable the clock for the LED GPIO (port D)
 800028e:	f7ff ff9b 	bl	80001c8 <led_clock_init>

    led_init(LED_GREEN);
 8000292:	200c      	movs	r0, #12
 8000294:	f7ff ffac 	bl	80001f0 <led_init>
    led_init(LED_ORANGE);
 8000298:	200d      	movs	r0, #13
 800029a:	f7ff ffa9 	bl	80001f0 <led_init>
    led_init(LED_RED);
 800029e:	200e      	movs	r0, #14
 80002a0:	f7ff ffa6 	bl	80001f0 <led_init>
    led_init(LED_BLUE);
 80002a4:	200f      	movs	r0, #15
 80002a6:	f7ff ffa3 	bl	80001f0 <led_init>

    while(1) {
        led_turn_on(LED_GREEN);
 80002aa:	200c      	movs	r0, #12
 80002ac:	f7ff ffba 	bl	8000224 <led_turn_on>
        led_turn_on(LED_ORANGE);
 80002b0:	200d      	movs	r0, #13
 80002b2:	f7ff ffb7 	bl	8000224 <led_turn_on>
        led_turn_on(LED_RED);
 80002b6:	200e      	movs	r0, #14
 80002b8:	f7ff ffb4 	bl	8000224 <led_turn_on>
        led_turn_on(LED_BLUE);
 80002bc:	200f      	movs	r0, #15
 80002be:	f7ff ffb1 	bl	8000224 <led_turn_on>

        for(int i = 0; i < 350000; i++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <main+0x46>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <main+0x7c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf8      	ble.n	80002c8 <main+0x40>

        led_turn_off(LED_GREEN);
 80002d6:	200c      	movs	r0, #12
 80002d8:	f7ff ffbc 	bl	8000254 <led_turn_off>
        led_turn_off(LED_ORANGE);
 80002dc:	200d      	movs	r0, #13
 80002de:	f7ff ffb9 	bl	8000254 <led_turn_off>
        led_turn_off(LED_RED);
 80002e2:	200e      	movs	r0, #14
 80002e4:	f7ff ffb6 	bl	8000254 <led_turn_off>
        led_turn_off(LED_BLUE);
 80002e8:	200f      	movs	r0, #15
 80002ea:	f7ff ffb3 	bl	8000254 <led_turn_off>

        for(int i = 0; i < 350000; i++);
 80002ee:	2300      	movs	r3, #0
 80002f0:	603b      	str	r3, [r7, #0]
 80002f2:	e002      	b.n	80002fa <main+0x72>
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	4a01      	ldr	r2, [pc, #4]	; (8000304 <main+0x7c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	ddf8      	ble.n	80002f4 <main+0x6c>
        led_turn_on(LED_GREEN);
 8000302:	e7d2      	b.n	80002aa <main+0x22>
 8000304:	0005572f 	.word	0x0005572f

08000308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <SystemInit+0x60>)
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <SystemInit+0x60>)
 8000310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <SystemInit+0x64>)
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <SystemInit+0x64>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <SystemInit+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800032e:	4a0f      	ldr	r2, [pc, #60]	; (800036c <SystemInit+0x64>)
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <SystemInit+0x64>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800033c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <SystemInit+0x64>)
 8000340:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <SystemInit+0x68>)
 8000342:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000344:	4a09      	ldr	r2, [pc, #36]	; (800036c <SystemInit+0x64>)
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <SystemInit+0x64>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800034e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <SystemInit+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <SystemInit+0x60>)
 8000358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800035c:	609a      	str	r2, [r3, #8]
#endif
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00
 800036c:	40023800 	.word	0x40023800
 8000370:	24003010 	.word	0x24003010

08000374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800037a:	e003      	b.n	8000384 <LoopCopyDataInit>

0800037c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800037e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000382:	3104      	adds	r1, #4

08000384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800038a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800038c:	d3f6      	bcc.n	800037c <CopyDataInit>
  ldr  r2, =_sbss
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000390:	e002      	b.n	8000398 <LoopFillZerobss>

08000392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000394:	f842 3b04 	str.w	r3, [r2], #4

08000398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800039a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800039c:	d3f9      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800039e:	f7ff ffb3 	bl	8000308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003a6:	f7ff ff6f 	bl	8000288 <main>
  bx  lr    
 80003aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003b0:	08000430 	.word	0x08000430
  ldr  r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4e0d      	ldr	r6, [pc, #52]	; (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003ce:	1ba4      	subs	r4, r4, r6
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2500      	movs	r5, #0
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4e0b      	ldr	r6, [pc, #44]	; (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	; (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1ba4      	subs	r4, r4, r6
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2500      	movs	r5, #0
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f0:	4798      	blx	r3
 80003f2:	3501      	adds	r5, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003fa:	4798      	blx	r3
 80003fc:	3501      	adds	r5, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
