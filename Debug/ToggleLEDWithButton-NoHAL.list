
ToggleLEDWithButton-NoHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010520  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 10 .debug_info   000013f1  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000502  00000000  00000000  00011941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000100  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00011f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000075d  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000a30  00000000  00000000  0001275d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001318d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000298  00000000  00000000  0001320c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000500 	.word	0x08000500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000500 	.word	0x08000500

080001c8 <led_clock_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_clock_init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    RCC_TypeDef *rcc = RCC;
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <led_clock_init+0x24>)
 80001d0:	607b      	str	r3, [r7, #4]
    rcc->AHB1ENR |= (1 << 3);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	f043 0208 	orr.w	r2, r3, #8
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40023800 	.word	0x40023800

080001f0 <led_init>:

void led_init(LED_ENUM led) {
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <led_init+0x30>)
 80001fc:	60fb      	str	r3, [r7, #12]
    gpio->MODER |= (01 << (led * 2));
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	0052      	lsls	r2, r2, #1
 8000206:	2101      	movs	r1, #1
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40020c00 	.word	0x40020c00

08000224 <led_turn_on>:

void led_turn_on(LED_ENUM led) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <led_turn_on+0x2c>)
 8000230:	60fb      	str	r3, [r7, #12]
    gpio->ODR |= (1 << led);
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	79fa      	ldrb	r2, [r7, #7]
 8000238:	2101      	movs	r1, #1
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	431a      	orrs	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	615a      	str	r2, [r3, #20]
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40020c00 	.word	0x40020c00

08000254 <led_turn_off>:

void led_turn_off(LED_ENUM led) {
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *gpio = GPIOD;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <led_turn_off+0x30>)
 8000260:	60fb      	str	r3, [r7, #12]
    gpio->ODR &= ~(1 << led);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	79fa      	ldrb	r2, [r7, #7]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	401a      	ands	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	615a      	str	r2, [r3, #20]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <main>:
#include "led.h"
#include "user_button.h"

static void clear_exti0_pending_register(void);

int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
    // Enable the clock for the LED GPIOs (port D)
    led_clock_init();
 800028c:	f7ff ff9c 	bl	80001c8 <led_clock_init>

    // Enable the clock for the user button. And configure an interrupt on the EXTI0 line.
    configure_user_button();
 8000290:	f000 f896 	bl	80003c0 <configure_user_button>

    led_init(LED_GREEN);
 8000294:	200c      	movs	r0, #12
 8000296:	f7ff ffab 	bl	80001f0 <led_init>
    led_init(LED_ORANGE);
 800029a:	200d      	movs	r0, #13
 800029c:	f7ff ffa8 	bl	80001f0 <led_init>
    led_init(LED_RED);
 80002a0:	200e      	movs	r0, #14
 80002a2:	f7ff ffa5 	bl	80001f0 <led_init>
    led_init(LED_BLUE);
 80002a6:	200f      	movs	r0, #15
 80002a8:	f7ff ffa2 	bl	80001f0 <led_init>

    while(1);
 80002ac:	e7fe      	b.n	80002ac <main+0x24>

080002ae <EXTI0_IRQHandler>:
	return 0;
}

void EXTI0_IRQHandler(void) {
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
    if (is_user_button_rising()) {
 80002b2:	f000 f8c5 	bl	8000440 <is_user_button_rising>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d00c      	beq.n	80002d6 <EXTI0_IRQHandler+0x28>
        led_turn_on(LED_GREEN);
 80002bc:	200c      	movs	r0, #12
 80002be:	f7ff ffb1 	bl	8000224 <led_turn_on>
        led_turn_on(LED_ORANGE);
 80002c2:	200d      	movs	r0, #13
 80002c4:	f7ff ffae 	bl	8000224 <led_turn_on>
        led_turn_on(LED_RED);
 80002c8:	200e      	movs	r0, #14
 80002ca:	f7ff ffab 	bl	8000224 <led_turn_on>
        led_turn_on(LED_BLUE);
 80002ce:	200f      	movs	r0, #15
 80002d0:	f7ff ffa8 	bl	8000224 <led_turn_on>
 80002d4:	e00b      	b.n	80002ee <EXTI0_IRQHandler+0x40>
    } else {
        led_turn_off(LED_GREEN);
 80002d6:	200c      	movs	r0, #12
 80002d8:	f7ff ffbc 	bl	8000254 <led_turn_off>
        led_turn_off(LED_ORANGE);
 80002dc:	200d      	movs	r0, #13
 80002de:	f7ff ffb9 	bl	8000254 <led_turn_off>
        led_turn_off(LED_RED);
 80002e2:	200e      	movs	r0, #14
 80002e4:	f7ff ffb6 	bl	8000254 <led_turn_off>
        led_turn_off(LED_BLUE);
 80002e8:	200f      	movs	r0, #15
 80002ea:	f7ff ffb3 	bl	8000254 <led_turn_off>
    }
    clear_exti0_pending_register();
 80002ee:	f000 f803 	bl	80002f8 <clear_exti0_pending_register>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <clear_exti0_pending_register>:

void clear_exti0_pending_register(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
    EXTI_TypeDef *exti = EXTI;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <clear_exti0_pending_register+0x24>)
 8000300:	607b      	str	r3, [r7, #4]
    exti->PR |= (1 << 0);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f043 0201 	orr.w	r2, r3, #1
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	615a      	str	r2, [r3, #20]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40013c00 	.word	0x40013c00

08000320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4a16      	ldr	r2, [pc, #88]	; (8000380 <SystemInit+0x60>)
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <SystemInit+0x60>)
 8000328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <SystemInit+0x64>)
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemInit+0x64>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <SystemInit+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000346:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <SystemInit+0x64>)
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <SystemInit+0x64>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000354:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <SystemInit+0x64>)
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <SystemInit+0x68>)
 800035a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <SystemInit+0x64>)
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <SystemInit+0x64>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <SystemInit+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <SystemInit+0x60>)
 8000370:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000374:	609a      	str	r2, [r3, #8]
#endif
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	40023800 	.word	0x40023800
 8000388:	24003010 	.word	0x24003010

0800038c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000396:	4909      	ldr	r1, [pc, #36]	; (80003bc <NVIC_EnableIRQ+0x30>)
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	095b      	lsrs	r3, r3, #5
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	f002 021f 	and.w	r2, r2, #31
 80003a4:	2001      	movs	r0, #1
 80003a6:	fa00 f202 	lsl.w	r2, r0, r2
 80003aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <configure_user_button>:
#include "core_cm4.h"

static void enable_user_btn_clock(void);
static void configure_user_btn_interrupt(void);

void configure_user_button(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
    enable_user_btn_clock();
 80003c4:	f000 f808 	bl	80003d8 <enable_user_btn_clock>
    configure_user_btn_interrupt();
 80003c8:	f000 f81a 	bl	8000400 <configure_user_btn_interrupt>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80003cc:	2006      	movs	r0, #6
 80003ce:	f7ff ffdd 	bl	800038c <NVIC_EnableIRQ>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <enable_user_btn_clock>:

void enable_user_btn_clock(void) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
    RCC_TypeDef *rcc = RCC;
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <enable_user_btn_clock+0x24>)
 80003e0:	607b      	str	r3, [r7, #4]
    rcc->AHB1ENR |= (1 << 0);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	f043 0201 	orr.w	r2, r3, #1
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800

08000400 <configure_user_btn_interrupt>:

void configure_user_btn_interrupt(void) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
    EXTI_TypeDef *exti = EXTI;
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <configure_user_btn_interrupt+0x3c>)
 8000408:	607b      	str	r3, [r7, #4]
    exti->IMR |= (1 << 0);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0201 	orr.w	r2, r3, #1
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
    exti->RTSR |= (1 << 0);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f043 0201 	orr.w	r2, r3, #1
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	609a      	str	r2, [r3, #8]
    exti->FTSR |= (1 << 0);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	60da      	str	r2, [r3, #12]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40013c00 	.word	0x40013c00

08000440 <is_user_button_rising>:

int is_user_button_rising(void) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
    GPIO_TypeDef *gpio = GPIOA;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <is_user_button_rising+0x20>)
 8000448:	607b      	str	r3, [r7, #4]
    return gpio->IDR & 1; // or (gpio->IDR >> 0) & (1 << 0)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	691b      	ldr	r3, [r3, #16]
 800044e:	f003 0301 	and.w	r3, r3, #1
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020000 	.word	0x40020000

08000464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800049c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800046a:	e003      	b.n	8000474 <LoopCopyDataInit>

0800046c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800046e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000472:	3104      	adds	r1, #4

08000474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800047a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800047c:	d3f6      	bcc.n	800046c <CopyDataInit>
  ldr  r2, =_sbss
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000480:	e002      	b.n	8000488 <LoopFillZerobss>

08000482 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000484:	f842 3b04 	str.w	r3, [r2], #4

08000488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800048a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800048c:	d3f9      	bcc.n	8000482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800048e:	f7ff ff47 	bl	8000320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000496:	f7ff fef7 	bl	8000288 <main>
  bx  lr    
 800049a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800049c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004a0:	08000520 	.word	0x08000520
  ldr  r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004a8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4e0d      	ldr	r6, [pc, #52]	; (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	; (80004f4 <__libc_init_array+0x3c>)
 80004be:	1ba4      	subs	r4, r4, r6
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2500      	movs	r5, #0
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4e0b      	ldr	r6, [pc, #44]	; (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	; (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1ba4      	subs	r4, r4, r6
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2500      	movs	r5, #0
 80004d6:	42a5      	cmp	r5, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004e0:	4798      	blx	r3
 80004e2:	3501      	adds	r5, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004ea:	4798      	blx	r3
 80004ec:	3501      	adds	r5, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
